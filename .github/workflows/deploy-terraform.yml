name: "Terraform aws EKS deployment"
on: [push, pull_request]
env:
  TF_LOG: INFO
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      - name: Mise Ã  jour des variables TF
        env:
          AWS_ACOUNT_ID: ${{ secrets.AWS_ACOUNT_ID }} 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SNS_TOPIC_ARN: ${{ secrets.AWS_SNS_TOPIC_ARN }}
          PETCLINIC_PASSWORD: ${{ secrets.PETCLINIC_PASSWORD }}  
          CLUSTER_NAME: CLUSTER_NAME

        run: |
          echo "sed -i 's#\my-aws-account-id'"#${AWS_ACOUNT_ID}#g" terraform.tfvars
          sed -i 's#\my-aws-account-id'"#${{ secrets.AWS_ACOUNT_ID }}#g" terraform.tfvars
          sed -i 's#\my-access-key'"#${{ secrets.AWS_ACCESS_KEY_ID }}#g" terraform.tfvars
          sed -i 's#\my-secret-key'"#${{ secrets.AWS_SECRET_ACCESS_KEY }}#g" terraform.tfvars
          sed -i 's#\my-sns-topic-arn'"#${{ secrets.AWS_SNS_TOPIC_ARN }}#g" terraform.tfvars
          sed -i 's#\my-password'"#${{ secrets.PETCLINIC_PASSWORD }}#g" terraform.tfvars
          sed -i 's#\cluster_name'"#${env.CLUSTER_NAME}#g" terraform.tfvars
          echo "CLUSTER_NAME :${{ env.CLUSTER_NAME }}  "
          cat terraform.tfvars | grep my-password
          cat terraform.tfvars | grep cluster_name

          
      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SNS_TOPIC_ARN: ${{ secrets.AWS_SNS_TOPIC_ARN }}
          PETCLINIC_PASSWORD: ${{ secrets.PETCLINIC_PASSWORD }}
        run: terraform init

      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        id: plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SNS_TOPIC_ARN: ${{ secrets.AWS_SNS_TOPIC_ARN }}
          PETCLINIC_PASSWORD: ${{ secrets.PETCLINIC_PASSWORD }}
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SNS_TOPIC_ARN: ${{ secrets.AWS_SNS_TOPIC_ARN }}
          PETCLINIC_PASSWORD: ${{ secrets.PETCLINIC_PASSWORD }}
        run : ./scripts/deploy.sh
        #run: terraform apply -auto-approve
